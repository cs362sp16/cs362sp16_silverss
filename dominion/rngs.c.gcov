        -:    0:Source:rngs.c
        -:    0:Graph:rngs.gcno
        -:    0:Data:rngs.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:/* -------------------------------------------------------------------------
        -:    2: * This is an ANSI C library for multi-stream random number generation.  
        -:    3: * The use of this library is recommended as a replacement for the ANSI C 
        -:    4: * rand() and srand() functions, particularly in simulation applications 
        -:    5: * where the statistical 'goodness' of the random number generator is 
        -:    6: * important.  The library supplies 256 streams of random numbers; use 
        -:    7: * SelectStream(s) to switch between streams indexed s = 0,1,...,255.
        -:    8: *
        -:    9: * The streams must be initialized.  The recommended way to do this is by
        -:   10: * using the function PlantSeeds(x) with the value of x used to initialize 
        -:   11: * the default stream and all other streams initialized automatically with
        -:   12: * values dependent on the value of x.  The following convention is used 
        -:   13: * to initialize the default stream:
        -:   14: *    if x > 0 then x is the state
        -:   15: *    if x < 0 then the state is obtained from the system clock
        -:   16: *    if x = 0 then the state is to be supplied interactively.
        -:   17: *
        -:   18: * The generator used in this library is a so-called 'Lehmer random number
        -:   19: * generator' which returns a pseudo-random number uniformly distributed
        -:   20: * 0.0 and 1.0.  The period is (m - 1) where m = 2,147,483,647 and the
        -:   21: * smallest and largest possible values are (1 / m) and 1 - (1 / m)
        -:   22: * respectively.  For more details see:
        -:   23: * 
        -:   24: *       "Random Number Generators: Good Ones Are Hard To Find"
        -:   25: *                   Steve Park and Keith Miller
        -:   26: *              Communications of the ACM, October 1988
        -:   27: *
        -:   28: * Name            : rngs.c  (Random Number Generation - Multiple Streams)
        -:   29: * Authors         : Steve Park & Dave Geyer
        -:   30: * Language        : ANSI C
        -:   31: * Latest Revision : 09-22-98
        -:   32: * ------------------------------------------------------------------------- 
        -:   33: */
        -:   34:
        -:   35:#include <stdio.h>
        -:   36:#include <time.h>
        -:   37:#include "rngs.h"
        -:   38:
        -:   39:#define MODULUS    2147483647 /* DON'T CHANGE THIS VALUE                  */
        -:   40:#define MULTIPLIER 48271      /* DON'T CHANGE THIS VALUE                  */
        -:   41:#define CHECK      399268537  /* DON'T CHANGE THIS VALUE                  */
        -:   42:#define STREAMS    256        /* # of streams, DON'T CHANGE THIS VALUE    */
        -:   43:#define A256       22925      /* jump multiplier, DON'T CHANGE THIS VALUE */
        -:   44:#define DEFAULT    123456789  /* initial seed, use 0 < DEFAULT < MODULUS  */
        -:   45:      
        -:   46:static long seed[STREAMS] = {DEFAULT};  /* current state of each stream   */
        -:   47:static int  stream        = 0;          /* stream index, 0 is the default */
        -:   48:static int  initialized   = 0;          /* test for stream initialization */
        -:   49:
        -:   50:
function Random called 60 returned 100% blocks executed 100%
       60:   51:   double Random(void)
        -:   52:/* ----------------------------------------------------------------
        -:   53: * Random returns a pseudo-random real number uniformly distributed 
        -:   54: * between 0.0 and 1.0. 
        -:   55: * ----------------------------------------------------------------
        -:   56: */
        -:   57:{
       60:   58:  const long Q = MODULUS / MULTIPLIER;
       60:   59:  const long R = MODULUS % MULTIPLIER;
        -:   60:        long t;
        -:   61:
       60:   62:  t = MULTIPLIER * (seed[stream] % Q) - R * (seed[stream] / Q);
       60:   63:  if (t > 0) 
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
       58:   64:    seed[stream] = t;
        -:   65:  else 
        2:   66:    seed[stream] = t + MODULUS;
       60:   67:  return ((double) seed[stream] / MODULUS);
        -:   68:}
        -:   69:
        -:   70:
function PlantSeeds called 2 returned 100% blocks executed 100%
        2:   71:   void PlantSeeds(long x)
        -:   72:/* ---------------------------------------------------------------------
        -:   73: * Use this function to set the state of all the random number generator 
        -:   74: * streams by "planting" a sequence of states (seeds), one per stream, 
        -:   75: * with all states dictated by the state of the default stream. 
        -:   76: * The sequence of planted states is separated one from the next by 
        -:   77: * 8,367,782 calls to Random().
        -:   78: * ---------------------------------------------------------------------
        -:   79: */
        -:   80:{
        2:   81:  const long Q = MODULUS / A256;
        2:   82:  const long R = MODULUS % A256;
        -:   83:        int  j;
        -:   84:        int  s;
        -:   85:
        2:   86:  initialized = 1;
        2:   87:  s = stream;                            /* remember the current stream */
        2:   88:  SelectStream(0);                       /* change to stream 0          */
call    0 returned 100%
        2:   89:  PutSeed(x);                            /* set seed[0]                 */
call    0 returned 100%
        2:   90:  stream = s;                            /* reset the current stream    */
      512:   91:  for (j = 1; j < STREAMS; j++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
      510:   92:    x = A256 * (seed[j - 1] % Q) - R * (seed[j - 1] / Q);
      510:   93:    if (x > 0)
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
      492:   94:      seed[j] = x;
        -:   95:    else
       18:   96:      seed[j] = x + MODULUS;
        -:   97:   }
        2:   98:}
        -:   99:
        -:  100:
function PutSeed called 4 returned 100% blocks executed 29%
        4:  101:   void PutSeed(long x)
        -:  102:/* ---------------------------------------------------------------
        -:  103: * Use this function to set the state of the current random number 
        -:  104: * generator stream according to the following conventions:
        -:  105: *    if x > 0 then x is the state (unless too large)
        -:  106: *    if x < 0 then the state is obtained from the system clock
        -:  107: *    if x = 0 then the state is to be supplied interactively
        -:  108: * ---------------------------------------------------------------
        -:  109: */
        -:  110:{
        4:  111:  char ok = 0;
        -:  112:
        4:  113:  if (x > 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        4:  114:    x = x % MODULUS;                       /* correct if x is too large  */
        4:  115:  if (x < 0)                                 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  116:    x = ((unsigned long) time((time_t *) NULL)) % MODULUS;              
call    0 never executed
        4:  117:  if (x == 0)                                
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  118:    while (!ok) {
branch  0 never executed
branch  1 never executed
    #####:  119:      printf("\nEnter a positive integer seed (9 digits or less) >> ");
call    0 never executed
    #####:  120:      scanf("%ld", &x);
call    0 never executed
    #####:  121:      ok = (0 < x) && (x < MODULUS);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  122:      if (!ok)
branch  0 never executed
branch  1 never executed
    #####:  123:        printf("\nInput out of range ... try again\n");
call    0 never executed
        -:  124:    }
        4:  125:  seed[stream] = x;
        4:  126:}
        -:  127:
        -:  128:
function GetSeed called 0 returned 0% blocks executed 0%
    #####:  129:   void GetSeed(long *x)
        -:  130:/* ---------------------------------------------------------------
        -:  131: * Use this function to get the state of the current random number 
        -:  132: * generator stream.                                                   
        -:  133: * ---------------------------------------------------------------
        -:  134: */
        -:  135:{
    #####:  136:  *x = seed[stream];
    #####:  137:}
        -:  138:
        -:  139:
function SelectStream called 4 returned 100% blocks executed 100%
        4:  140:   void SelectStream(int index)
        -:  141:/* ------------------------------------------------------------------
        -:  142: * Use this function to set the current random number generator
        -:  143: * stream -- that stream from which the next random number will come.
        -:  144: * ------------------------------------------------------------------
        -:  145: */
        -:  146:{
        4:  147:  stream = ((unsigned int) index) % STREAMS;
        4:  148:  if ((initialized == 0) && (stream != 0))   /* protect against        */
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        2:  149:    PlantSeeds(DEFAULT);                     /* un-initialized streams */
call    0 returned 100%
        4:  150:}
        -:  151:
        -:  152:
function TestRandom called 0 returned 0% blocks executed 0%
    #####:  153:   void TestRandom(void)
        -:  154:/* ------------------------------------------------------------------
        -:  155: * Use this (optional) function to test for a correct implementation.
        -:  156: * ------------------------------------------------------------------    
        -:  157: */
        -:  158:{
        -:  159:  long   i;
        -:  160:  long   x;
        -:  161:  double u;
    #####:  162:  char   ok = 0;  
        -:  163:
    #####:  164:  SelectStream(0);                  /* select the default stream */
call    0 never executed
    #####:  165:  PutSeed(1);                       /* and set the state to 1    */
call    0 never executed
    #####:  166:  for(i = 0; i < 10000; i++)
branch  0 never executed
branch  1 never executed
    #####:  167:    u = Random();
call    0 never executed
    #####:  168:  GetSeed(&x);                      /* get the new state value   */
call    0 never executed
    #####:  169:  ok = (x == CHECK);                /* and check for correctness */
        -:  170:
    #####:  171:  SelectStream(1);                  /* select stream 1                 */ 
call    0 never executed
    #####:  172:  PlantSeeds(1);                    /* set the state of all streams    */
call    0 never executed
    #####:  173:  GetSeed(&x);                      /* get the state of stream 1       */
call    0 never executed
    #####:  174:  ok = ok && (x == A256);           /* x should be the jump multiplier */    
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  175:  if (ok)
branch  0 never executed
branch  1 never executed
    #####:  176:    printf("\n The implementation of rngs.c is correct.\n\n");
call    0 never executed
        -:  177:  else
    #####:  178:    printf("\n\a ERROR -- the implementation of rngs.c is not correct.\n\n");
call    0 never executed
    #####:  179:}
