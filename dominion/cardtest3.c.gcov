        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3:#include <assert.h>
        -:    4:#include "dominion.h"
        -:    5:#include "dominion_helpers.h"
        -:    6:#include "rngs.h"
        -:    7:
        -:    8:
        -:    9:#define DEBUG 0
        -:   10:#define NOISY_TEST 1
        -:   11:
function main called 1 returned 100% blocks executed 77%
        1:   12:int main(){
        -:   13:
        -:   14:	struct gameState Game;
        1:   15:	int FailCheck = 0;
        1:   16:	int a[10] = {smithy, great_hall, gardens, minion, village, adventurer, sea_hag, mine, feast, remodel};
        1:   17:	int numPlayers = 3;
        1:   18:	int seed = 42;
        -:   19:
        1:   20:	initializeGame(numPlayers, a, seed, &Game);
call    0 returned 100%
        -:   21:
        1:   22:	Game.hand[0][0] = sea_hag;
        1:   23:	int startHandCount = numHandCards(&Game);
call    0 returned 100%
        1:   24:	int startActions = Game.numActions;
        1:   25:	if(playCard(0,0,0,0,&Game) != 0){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   26:		printf("ERROR: card was not played\n");
call    0 never executed
    #####:   27:		FailCheck = 1;
        -:   28:	}
        -:   29:
        1:   30:	int endHandCount = numHandCards(&Game);
call    0 returned 100%
        1:   31:	int endActions = Game.numActions;
        -:   32:	//should have one less card
        1:   33:	if(endHandCount != startHandCount -1){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   34:		printf("ERROR: sea_hag was not discarded.\n");
call    0 returned 100%
        1:   35:		FailCheck = 1;
        -:   36:	}
        -:   37:
        1:   38:	if(endActions != startActions -1){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   39:		printf("ERROR: did not use an action.\n");
call    0 never executed
    #####:   40:		FailCheck = 1;
        -:   41:	}
        -:   42:
        1:   43:	int curseCheck = 0;
        -:   44:	int i;
        -:   45:	//see if top cards of other players' decks are curses
        4:   46:	for(i=0;i<3;i++){
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        3:   47:		if(i != Game.whoseTurn){
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        2:   48:			printf("card: %d\n",Game.deck[i][Game.deckCount[i]-1]);
call    0 returned 100%
        2:   49:			if(Game.deck[i][Game.deckCount[i]-1] != 0){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2:   50:				curseCheck = 1;
        -:   51:			}
        -:   52:	}
        -:   53:	}
        1:   54:	if(curseCheck ==1){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   55:		printf("ERROR: curses not added to opponent's decks.\n");
call    0 returned 100%
        -:   56:	}
        -:   57:
        1:   58:	if(FailCheck == 0 && curseCheck == 0){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
    #####:   59:		printf("SUCCESS: sea_hag played correctly.\n");
call    0 never executed
        -:   60:	}
        1:   61:	return 0;
        -:   62:	
        -:   63:}