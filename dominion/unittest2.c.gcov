        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3:#include <assert.h>
        -:    4:#include "dominion.h"
        -:    5:#include "dominion_helpers.h"
        -:    6:#include "rngs.h"
        -:    7:
        -:    8:
        -:    9:#define DEBUG 0
        -:   10:#define NOISY_TEST 1
        -:   11:
function main called 1 returned 100% blocks executed 60%
        1:   12:int main(){
        1:   13:	int FailCheck = 0;
        1:   14:	int supplyPos = 5;
        -:   15:	struct gameState Game;
        1:   16:	Game.supplyCount[supplyPos] = 5; // results in a card cost of 3, determined by commented-out printf statements below
        1:   17:	Game.coins = 10;
        1:   18:	Game.numBuys = 1;
        -:   19:	//printf("supplyPos value: %d\n",Game.supplyCount[supplyPos] );
        -:   20:	//printf("card cost value: %d\n",getCost(supplyPos) );
        -:   21:
        1:   22:	if(buyCard(supplyPos, &Game) != 0){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   23:		printf("buyCard failed on first buy attempt\n");
call    0 never executed
    #####:   24:		FailCheck = 1;
        -:   25:	}
        -:   26:
        -:   27:	//check to see if game will allow second buy
        1:   28:	if(buyCard(supplyPos, &Game) != -1){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   29:		printf("buyCard allowed a second buy attempt\n");
call    0 never executed
    #####:   30:		FailCheck = 1;
        -:   31:	}
        -:   32:
        -:   33:	//see if can buy without enough coins
        1:   34:	Game.coins = 0;
        1:   35:	Game.numBuys =1;
        -:   36:
        1:   37:	if(buyCard(supplyPos, &Game) != -1){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   38:		printf("buyCard allowed buy without enough coin\n");
call    0 never executed
    #####:   39:		FailCheck = 1;
        -:   40:	}
        1:   41:	if(FailCheck == 0){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   42:		printf("No errors found in buyCard function\n");
call    0 returned 100%
        -:   43:	}
        -:   44:
        -:   45:
        -:   46:
        -:   47:
        1:   48:	return 0;
        -:   49:	
        -:   50:}