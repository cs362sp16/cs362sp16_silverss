        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3:#include <assert.h>
        -:    4:#include "dominion.h"
        -:    5:#include "dominion_helpers.h"
        -:    6:#include "rngs.h"
        -:    7:
        -:    8:
        -:    9:#define DEBUG 0
        -:   10:#define NOISY_TEST 1
        -:   11:
function main called 1 returned 100% blocks executed 63%
        1:   12:int main(){
        -:   13:
        -:   14:	struct gameState Game;
        1:   15:	int FailCheck = 0;
        1:   16:	int a[10] = {smithy, great_hall, gardens, minion, village, adventurer, sea_hag, mine, feast, remodel};
        1:   17:	int numPlayers = 3;
        1:   18:	int seed = 42;
        -:   19:	//setup a game so the card to be tested can be played
        1:   20:	initializeGame(numPlayers, a, seed, &Game);
call    0 returned 100%
        -:   21:
        1:   22:	Game.hand[0][0] = smithy;
        1:   23:	int startActions = Game.numActions;
        1:   24:	int startHandCount = numHandCards(&Game);
call    0 returned 100%
        -:   25:
        1:   26:	if(playCard(0,0,0,0,&Game) != 0){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   27:		printf("ERROR: card was not played\n");
call    0 never executed
    #####:   28:		FailCheck = 1;
        -:   29:	}
        -:   30:
        1:   31:	int endActions = Game.numActions;
        1:   32:	int endHandCount = numHandCards(&Game);
call    0 returned 100%
        -:   33:
        -:   34:	//check number cards in hand, smithy give +3 but then is discarded, giving a net +2
        1:   35:	if(endHandCount != startHandCount + 2){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   36:		printf("ERROR: smithy drew the wrong number of cards, or was not discarded\n");
call    0 never executed
    #####:   37:		FailCheck = 1;
        -:   38:	}
        -:   39:	//check that an action was spent playing smithy
        1:   40:	if(endActions != startActions -1){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   41:		printf("ERROR: number of actions after play is not correct.\n");
call    0 never executed
    #####:   42:		FailCheck = 1;
        -:   43:	}
        -:   44:
        1:   45:	if(FailCheck == 0){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   46:		printf("SUCCESS: smithy card executes correctly.\n");
call    0 returned 100%
        -:   47:	}
        1:   48:	return 0;
        -:   49:	
        -:   50:}